// Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.
// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/aws/amazon-vpc-cni-k8s/pkg/apis/crd.k8s.amazonaws.com/v1alpha1"
	scheme "github.com/aws/amazon-vpc-cni-k8s/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// ENIConfigListsGetter has a method to return a ENIConfigListInterface.
// A group's client should implement this interface.
type ENIConfigListsGetter interface {
	ENIConfigLists(namespace string) ENIConfigListInterface
}

// ENIConfigListInterface has methods to work with ENIConfigList resources.
type ENIConfigListInterface interface {
	Create(*v1alpha1.ENIConfigList) (*v1alpha1.ENIConfigList, error)
	Update(*v1alpha1.ENIConfigList) (*v1alpha1.ENIConfigList, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.ENIConfigList, error)
	List(opts v1.ListOptions) (*v1alpha1.ENIConfigListList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.ENIConfigList, err error)
	ENIConfigListExpansion
}

// eNIConfigLists implements ENIConfigListInterface
type eNIConfigLists struct {
	client rest.Interface
	ns     string
}

// newENIConfigLists returns a ENIConfigLists
func newENIConfigLists(c *CrdV1alpha1Client, namespace string) *eNIConfigLists {
	return &eNIConfigLists{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the eNIConfigList, and returns the corresponding eNIConfigList object, and an error if there is any.
func (c *eNIConfigLists) Get(name string, options v1.GetOptions) (result *v1alpha1.ENIConfigList, err error) {
	result = &v1alpha1.ENIConfigList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("eniconfiglists").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of ENIConfigLists that match those selectors.
func (c *eNIConfigLists) List(opts v1.ListOptions) (result *v1alpha1.ENIConfigListList, err error) {
	result = &v1alpha1.ENIConfigListList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("eniconfiglists").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested eNIConfigLists.
func (c *eNIConfigLists) Watch(opts v1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("eniconfiglists").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a eNIConfigList and creates it.  Returns the server's representation of the eNIConfigList, and an error, if there is any.
func (c *eNIConfigLists) Create(eNIConfigList *v1alpha1.ENIConfigList) (result *v1alpha1.ENIConfigList, err error) {
	result = &v1alpha1.ENIConfigList{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("eniconfiglists").
		Body(eNIConfigList).
		Do().
		Into(result)
	return
}

// Update takes the representation of a eNIConfigList and updates it. Returns the server's representation of the eNIConfigList, and an error, if there is any.
func (c *eNIConfigLists) Update(eNIConfigList *v1alpha1.ENIConfigList) (result *v1alpha1.ENIConfigList, err error) {
	result = &v1alpha1.ENIConfigList{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("eniconfiglists").
		Name(eNIConfigList.Name).
		Body(eNIConfigList).
		Do().
		Into(result)
	return
}

// Delete takes name of the eNIConfigList and deletes it. Returns an error if one occurs.
func (c *eNIConfigLists) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("eniconfiglists").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *eNIConfigLists) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("eniconfiglists").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched eNIConfigList.
func (c *eNIConfigLists) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.ENIConfigList, err error) {
	result = &v1alpha1.ENIConfigList{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("eniconfiglists").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
