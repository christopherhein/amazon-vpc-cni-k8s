// Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.
// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/aws/amazon-vpc-cni-k8s/pkg/apis/crd.k8s.amazonaws.com/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeENIConfigLists implements ENIConfigListInterface
type FakeENIConfigLists struct {
	Fake *FakeCrdV1alpha1
	ns   string
}

var eniconfiglistsResource = schema.GroupVersionResource{Group: "crd.k8s.amazonaws.com", Version: "v1alpha1", Resource: "eniconfiglists"}

var eniconfiglistsKind = schema.GroupVersionKind{Group: "crd.k8s.amazonaws.com", Version: "v1alpha1", Kind: "ENIConfigList"}

// Get takes name of the eNIConfigList, and returns the corresponding eNIConfigList object, and an error if there is any.
func (c *FakeENIConfigLists) Get(name string, options v1.GetOptions) (result *v1alpha1.ENIConfigList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(eniconfiglistsResource, c.ns, name), &v1alpha1.ENIConfigList{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ENIConfigList), err
}

// List takes label and field selectors, and returns the list of ENIConfigLists that match those selectors.
func (c *FakeENIConfigLists) List(opts v1.ListOptions) (result *v1alpha1.ENIConfigListList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(eniconfiglistsResource, eniconfiglistsKind, c.ns, opts), &v1alpha1.ENIConfigListList{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ENIConfigListList), err
}

// Watch returns a watch.Interface that watches the requested eNIConfigLists.
func (c *FakeENIConfigLists) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(eniconfiglistsResource, c.ns, opts))

}

// Create takes the representation of a eNIConfigList and creates it.  Returns the server's representation of the eNIConfigList, and an error, if there is any.
func (c *FakeENIConfigLists) Create(eNIConfigList *v1alpha1.ENIConfigList) (result *v1alpha1.ENIConfigList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(eniconfiglistsResource, c.ns, eNIConfigList), &v1alpha1.ENIConfigList{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ENIConfigList), err
}

// Update takes the representation of a eNIConfigList and updates it. Returns the server's representation of the eNIConfigList, and an error, if there is any.
func (c *FakeENIConfigLists) Update(eNIConfigList *v1alpha1.ENIConfigList) (result *v1alpha1.ENIConfigList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(eniconfiglistsResource, c.ns, eNIConfigList), &v1alpha1.ENIConfigList{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ENIConfigList), err
}

// Delete takes name of the eNIConfigList and deletes it. Returns an error if one occurs.
func (c *FakeENIConfigLists) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(eniconfiglistsResource, c.ns, name), &v1alpha1.ENIConfigList{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeENIConfigLists) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(eniconfiglistsResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &v1alpha1.ENIConfigListList{})
	return err
}

// Patch applies the patch and returns the patched eNIConfigList.
func (c *FakeENIConfigLists) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.ENIConfigList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(eniconfiglistsResource, c.ns, name, data, subresources...), &v1alpha1.ENIConfigList{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ENIConfigList), err
}
